// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	math "math"

	msg "github.com/btwiuse/wetty/pkg/msg"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Type                 msg.Type `protobuf:"varint,1,opt,name=type,proto3,enum=msg.Type" json:"type,omitempty"`
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() msg.Type {
	if m != nil {
		return m.Type
	}
	return msg.Type_CLIENT_INPUT
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "api.Message")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2,
	0xcf, 0x2d, 0x4e, 0xd7, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0x88, 0x2a, 0xd9, 0x70, 0xb1, 0xfb,
	0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0xc9, 0x72, 0xb1, 0x80, 0x64, 0x24, 0x18, 0x15, 0x18,
	0x35, 0xf8, 0x8c, 0x38, 0xf5, 0x72, 0x8b, 0xd3, 0xf5, 0x42, 0x2a, 0x0b, 0x52, 0x83, 0xc0, 0xc2,
	0x42, 0x42, 0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60,
	0xb6, 0x91, 0x31, 0x17, 0x7b, 0x70, 0x6a, 0x71, 0x71, 0x66, 0x7e, 0x9e, 0x90, 0x06, 0x17, 0x4b,
	0x70, 0x6a, 0x5e, 0x8a, 0x10, 0x8f, 0x1e, 0xc8, 0x4a, 0xa8, 0x99, 0x52, 0x28, 0x3c, 0x25, 0x06,
	0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xcd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90,
	0x05, 0x24, 0xa0, 0xa0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Session_SendClient, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Send(ctx context.Context, opts ...grpc.CallOption) (Session_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Session_serviceDesc.Streams[0], "/api.Session/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionSendClient{stream}
	return x, nil
}

type Session_SendClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type sessionSendClient struct {
	grpc.ClientStream
}

func (x *sessionSendClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionSendClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionServer is the server API for Session service.
type SessionServer interface {
	Send(Session_SendServer) error
}

// UnimplementedSessionServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (*UnimplementedSessionServer) Send(srv Session_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionServer).Send(&sessionSendServer{stream})
}

type Session_SendServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type sessionSendServer struct {
	grpc.ServerStream
}

func (x *sessionSendServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionSendServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Session",
	HandlerType: (*SessionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Session_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
