load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "cipher.go",
        "client.go",
        "encrypt.go",
        "init.go",
        "link.go",
        "relay.go",
        "server.go",
        "socks5.go",
        "socks5tohttp.go",
        "ssclient.go",
        "sskey.go",
        "ssserver.go",
        "tproxy_linux.go",
        "tproxy_notlinux.go",
        "tunnel.go",
        "util.go",
        "vpn.go",
        "vpn_darwin.go",
        "vpn_linux.go",
        "vpn_windows.go",
        "wsclient.go",
        "wsserver.go",
    ],
    importpath = "k0s.io/k0s/pkg/brook",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/brook/limits:go_default_library",
        "//pkg/brook/plugin:go_default_library",
        "//pkg/brook/sysproxy:go_default_library",
        "//vendor/github.com/gorilla/mux:go_default_library",
        "//vendor/github.com/gorilla/websocket:go_default_library",
        "//vendor/github.com/mdp/qrterminal:go_default_library",
        "//vendor/github.com/patrickmn/go-cache:go_default_library",
        "//vendor/github.com/txthinking/gotun2socks:go_default_library",
        "//vendor/github.com/txthinking/gotun2socks/tun:go_default_library",
        "//vendor/github.com/txthinking/socks5:go_default_library",
        "//vendor/github.com/txthinking/x:go_default_library",
        "//vendor/github.com/urfave/negroni:go_default_library",
        "//vendor/golang.org/x/crypto/acme/autocert:go_default_library",
        "//vendor/golang.org/x/net/proxy:go_default_library",
    ] + select({
        "@io_bazel_rules_go//go/platform:android": [
            "//pkg/brook/tproxy:go_default_library",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "//pkg/brook/tproxy:go_default_library",
        ],
        "//conditions:default": [],
    }),
)
