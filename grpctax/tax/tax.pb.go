// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tax.proto

package tax

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Amount struct {
	Cents                int32    `protobuf:"varint,1,opt,name=cents,proto3" json:"cents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Amount) Reset()         { *m = Amount{} }
func (m *Amount) String() string { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()    {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc148b98924644b2, []int{0}
}

func (m *Amount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Amount.Unmarshal(m, b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return xxx_messageInfo_Amount.Size(m)
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetCents() int32 {
	if m != nil {
		return m.Cents
	}
	return 0
}

func init() {
	proto.RegisterType((*Amount)(nil), "Amount")
}

func init() { proto.RegisterFile("tax.proto", fileDescriptor_dc148b98924644b2) }

var fileDescriptor_dc148b98924644b2 = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x49, 0xac, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe3, 0x62, 0x73, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0x11,
	0x12, 0xe1, 0x62, 0x4d, 0x4e, 0xcd, 0x2b, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82,
	0x70, 0x8c, 0x34, 0xb8, 0xb8, 0x43, 0x12, 0x2b, 0x9c, 0xf3, 0x73, 0x0b, 0x4a, 0x4b, 0x52, 0x8b,
	0x84, 0x24, 0xb9, 0x98, 0x43, 0x12, 0x2b, 0x84, 0xd8, 0xf5, 0x20, 0x9a, 0xa4, 0x60, 0x0c, 0x25,
	0x06, 0x27, 0xf6, 0x28, 0x56, 0x3d, 0xfd, 0x92, 0xc4, 0x8a, 0x24, 0x36, 0xb0, 0xc9, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xe6, 0xef, 0x7e, 0x66, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaxComputerClient is the client API for TaxComputer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaxComputerClient interface {
	Tax(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Amount, error)
}

type taxComputerClient struct {
	cc *grpc.ClientConn
}

func NewTaxComputerClient(cc *grpc.ClientConn) TaxComputerClient {
	return &taxComputerClient{cc}
}

func (c *taxComputerClient) Tax(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := c.cc.Invoke(ctx, "/TaxComputer/Tax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxComputerServer is the server API for TaxComputer service.
type TaxComputerServer interface {
	Tax(context.Context, *Amount) (*Amount, error)
}

// UnimplementedTaxComputerServer can be embedded to have forward compatible implementations.
type UnimplementedTaxComputerServer struct {
}

func (*UnimplementedTaxComputerServer) Tax(ctx context.Context, req *Amount) (*Amount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tax not implemented")
}

func RegisterTaxComputerServer(s *grpc.Server, srv TaxComputerServer) {
	s.RegisterService(&_TaxComputer_serviceDesc, srv)
}

func _TaxComputer_Tax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxComputerServer).Tax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaxComputer/Tax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxComputerServer).Tax(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaxComputer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaxComputer",
	HandlerType: (*TaxComputerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tax",
			Handler:    _TaxComputer_Tax_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tax.proto",
}
